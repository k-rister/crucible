#!/usr/bin/env bash
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-

# update a git repository from the current working directory

# git outputs to both STDOUT and STDERR; lets force everything to
# STDOUT so that the output makes more sense when run many times
# (since it keeps the relevant output together)
exec 2>&1

source /etc/sysconfig/crucible

if [ -z "${CRUCIBLE_HOME}" ]; then
    echo "ERROR: CRUCIBLE_HOME not defined!"
    exit 1
fi

if [ ! -e "${CRUCIBLE_HOME}" ]; then
    echo "ERROR: Could not find ${CRUCIBLE_HOME}!"
    exit 1
fi

source "${CRUCIBLE_HOME}/bin/base"
source "${CRUCIBLE_HOME}/bin/jqlib"

REPO_FILE="${CRUCIBLE_HOME}/config/repos.json"

PROJECT=${1}
if [ -z "${PROJECT}" ]; then
    echo "ERROR: You must supply a project name!"
    exit 1
else
    PROJECT_NAME=$(jq_query ${REPO_FILE} --arg project ${PROJECT} '.official[], .unofficial[] | select(.name == $project) | .name')
    if [ "${PROJECT_NAME}" != "${PROJECT}" ]; then
	echo "ERROR: You must supply a valid project name!"
	exit 1
    fi

    PROJECT_REPOSITORY=$(jq_query ${REPO_FILE} --arg project ${PROJECT} '.official[], .unofficial[] | select(.name == $project) | .repository')
    PROJECT_PRIMARY_BRANCH=$(jq_query ${REPO_FILE} --arg project ${PROJECT} '.official[], .unofficial[] | select(.name == $project) | ."primary-branch"')
    PROJECT_CHECKOUT_MODE=$(jq_query ${REPO_FILE} --arg project ${PROJECT} '.official[], .unofficial[] | select(.name == $project) | .checkout.mode')
    PROJECT_CHECKOUT_TARGET=$(jq_query ${REPO_FILE} --arg project ${PROJECT} '.official[], .unofficial[] | select(.name == $project) | .checkout.target')
fi

current_dir=$(pwd)
echo "Attempting to update project repo ${PROJECT_NAME} at '${current_dir}' -> '$(readlink -e ${current_dir})'"

if [ "${PROJECT_REPOSITORY}" == "CRUCIBLE-CI" ]; then
    echo "Bypassing updates to project repo ${PROJECT_NAME} since it is the crucible-ci target"
    exit 0
fi

if [ -d "./.git" ]; then
    # validate that the current repository matches the expected repository
    ORIGIN_REPOSITORY=$(git remote get-url origin)
    if [ "${ORIGIN_REPOSITORY}" != "${PROJECT_REPOSITORY}" ]; then
	echo "ERROR: Invalid state!  The origin repository does not match the project repository!"
	exit 1
    fi

    current_ref=$(git rev-parse --verify HEAD)
    expected_ref=$(git rev-parse --verify ${PROJECT_CHECKOUT_TARGET})

    if [ "${current_ref}" != "${expected_ref}" ]; then
	echo "ERROR: Invalid state!  The current checked out ref (${current_ref}) does not match the checkout target's ref (${PROJECT_CHECKOUT_TARGET} -> ${expected_ref})!"
	exit 1
    fi

    # fetch updates from remote(s)
    git_fetch_cmd="git fetch --all --prune --prune-tags --tags --verbose --force"
    echo "${git_fetch_cmd}"
    if ! ${git_fetch_cmd} 2>&1; then
	echo "ERROR: could not git-fetch"
	exit 1
    fi

    # store any local changes
    stash_output=$(git stash)
    if [ $? != 0 ]; then
	echo "ERROR: could not git-stash"
	exit 1
    fi

    # return to the primary branch so that we can then return to the
    # checkout target in case it's reference has changed (ie. an
    # updated tag)
    echo "Switching to primary branch to quiesce the repository state"
    git checkout ${PROJECT_PRIMARY_BRANCH}

    # return to the checkout target if it is not the primary branch
    if [ "${PROJECT_PRIMARY_BRANCH}" != "${PROJECT_CHECKOUT_TARGET}" ]; then
	echo "Returning to the checkout target"
	git -c advice.detachedHead=false checkout ${PROJECT_CHECKOUT_TARGET}
    fi

    if [ "${PROJECT_CHECKOUT_MODE}" == "locked" ]; then
	# return to the previous ref if is supposed to be locked there
	echo "Returning to the previously checked out ref since I am in locked mode"
	git checkout ${current_ref}
    elif [ "${PROJECT_CHECKOUT_MODE}" == "follow" ]; then
	if [ "${PROJECT_CHECKOUT_TARGET}" == "HEAD" ]; then
	    echo "Detected CI environment, skipping merge of changes from the remote branch (because they do not exist)"
	else
	    # merge any changes from the remote branch
	    echo "Merging any available upstream changes because I am in follow mode"
	    if ! git pull --verbose --ff-only 2> /dev/null; then
		echo "ERROR: could not git-pull"
		exit 1
	    fi
	fi
    fi

    if ! echo "${stash_output}" | grep -q "No local changes to save"; then
        # reapply local changes
	echo "Reapplying stashed local changes"
        if ! git stash pop > /dev/null; then
	    echo -e "${stash_output}"
	    echo "ERROR: could not git-stash pop"
	    exit 1
	fi
    fi
else
    echo "ERROR: this is not a valid git repo"
    exit 1
fi
