#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

# repo updating infrastructure

. /etc/sysconfig/crucible

if [ -z "$CRUCIBLE_HOME" ]; then
    echo "CRUCIBLE_HOME not defined, exiting."
    exit 1
fi

if [ ! -e $CRUCIBLE_HOME ]; then
    echo "Could not find $CRUCIBLE_HOME, exiting."
    exit 1
fi

source ${CRUCIBLE_HOME}/bin/base
source ${CRUCIBLE_HOME}/bin/jqlib

REPO_FILE=${CRUCIBLE_HOME}/config/repos.json

help_column_width=25

function help() {
    echo "Usage:"
    echo "  update <target>"
    echo
    echo "The following targets are supported:"
    echo
    printf "%-${help_column_width}s | Update all repositories (default)\n" "all"
    printf "%-${help_column_width}s | Update the main crucible repository\n" "crucible"
    printf "%-${help_column_width}s | Update the controller container image\n" "controller-image"
    echo
    for project in $(jq_query ${REPO_FILE} '.official[], .unofficial[] | select(.name != "crucible") | .name'); do
        printf "%-${help_column_width}s | Update the %s repository\n" "${project}" "${project}"
    done
    echo
}

if [ "$1" == "help" ]; then
    help
    exit
elif [ -z "$1" ]; then
    repo="all"
else
    repo="$1"
fi

RC=0

if [ -e "${UPDATE_STATUS_FILE}" ]; then
    rm "${UPDATE_STATUS_FILE}" "${UPDATE_STATUS_FILE}.log"
fi

case "${repo}" in
    "all"|"crucible"|"controller-image")
        echo
        echo "Shutting down existing controller pods:"
        echo
        if ! service_control stop opensearch httpd valkey; then
            RC=1
        fi
        if [ ${RC} -eq 1 ]; then
            echo
            echo "ERROR: Failed to stop one or more Crucible services"
            exit 1
        fi
        ;;
esac

case "${repo}" in
    "all"|"__all"|"crucible"|"__crucible")
        case "${repo}" in
            "all"|"crucible")
                echo
                echo "Crucible update pass 1:"
                ;;
            "__all"|"__crucible")
                echo
                echo "Crucible update pass 2:"
                ;;
        esac
        echo

        # the first and second time this script is called for the
        # "all" or "crucible" targets a special case is invoked to
        # ensure that updates can be done to the crucible repository
        # in a manner which does not break the update process

        if pushd ${CRUCIBLE_HOME} > /dev/null; then
            # create and execute a temporary script so that changes to the
            # "real" script do not break the updating process while it is
            # running -- ie. handle bash does not behave when the script
            # is changed while it is running
            TMP_SCRIPT=$(mktemp)
            cp -a ${CRUCIBLE_HOME}/bin/_update-git ${TMP_SCRIPT}
            echo "rm ${TMP_SCRIPT}" >> ${TMP_SCRIPT}
            echo "exec ${CRUCIBLE_HOME}/bin/update __${repo}" >> ${TMP_SCRIPT}

            exec ${TMP_SCRIPT} crucible
        else
            echo "ERROR: failed to pushd to ${CRUCIBLE_HOME}"
            exit 1
        fi
        ;;
esac

# beyond this point the script behaves "normally", meaning that it
# does not have to create a copy of itself anymore and exec that copy

case "${repo}" in
    "____all"|"____crucible")
        # any crucible specific post update logic goes here
        ;;
esac

case "${repo}" in
    "____all"|"____crucible"|"controller-image")
        echo
        echo "Checking for new controller image:"
        echo
        if ! ${podman_pull} ${CRUCIBLE_CONTROLLER_IMAGE}; then
            RC=1
        fi
        ;;
    *)
        PROJECT_NAME=$(jq_query ${REPO_FILE} --arg project ${repo} '.official[], .unofficial[] | select(.name == $project) | .name')
        if [ "${PROJECT_NAME}" != "${repo}" ]; then
	    echo "ERROR: You must supply a valid project name!"
	    exit 1
        fi
        PROJECT_TYPE=$(jq_query ${REPO_FILE} --arg project ${repo} '.official[], .unofficial[] | select(.name == $project) | .type')

        repo_dir=${CRUCIBLE_HOME}/subprojects/$(get_project_type_dir ${PROJECT_TYPE})/${PROJECT_NAME}
        if [ -n "${repo_dir}" -a -L "${repo_dir}" ]; then
            echo
            echo "Updating ${PROJECT_NAME}:"
            echo

            if pushd "${repo_dir}" > /dev/null; then
                if $CRUCIBLE_HOME/bin/_update-git ${PROJECT_NAME}; then
                    exit 0
                else
                    exit 1
                fi
            else
                echo "ERROR: Could not pushd to ${repo_dir}!"
                exit 1
            fi
        else
            echo "ERROR: Invalid project directory '${repo_dir}'!"
            exit 1
        fi
        ;;
esac

if [ "${repo}" == "____all" ]; then
    for project in $(jq_query ${REPO_FILE} '.official[], .unofficial[] | select(.name != "crucible") | .name'); do
        PROJECT_NAME=$(jq_query ${REPO_FILE} --arg project ${project} '.official[], .unofficial[] | select(.name == $project) | .name')
        PROJECT_TYPE=$(jq_query ${REPO_FILE} --arg project ${project} '.official[], .unofficial[] | select(.name == $project) | .type')

        repo_dir=${CRUCIBLE_HOME}/subprojects/$(get_project_type_dir ${PROJECT_TYPE})/${PROJECT_NAME}
        if [ -n "${repo_dir}" -a -L "${repo_dir}" ]; then
            echo
            echo "Updating ${PROJECT_NAME}:"
            echo

            if pushd ${repo_dir} > /dev/null; then
                if ! $CRUCIBLE_HOME/bin/_update-git ${PROJECT_NAME}; then
                    RC=1
                fi
                popd > /dev/null
            else
                echo "ERROR: Could not pushd to ${repo_dir}!"
                RC=1
            fi
        else
            echo "ERROR: Invalid project directory '${repo_dir}'!"
            RC=1
        fi
    done
fi

case "${repo}" in
    "____all"|"____crucible")
        # install any new subprojects; do this after the updating
        # process so we don't clone and then immediately try to update
        # the repo which would just hammer the repo site
        echo
        echo "Checking for and installing any new subprojects:"
        echo

        if ! ${CRUCIBLE_HOME}/bin/subprojects-install; then
            RC=1
        fi
        ;;
esac

echo
${CRUCIBLE_HOME}/bin/repo info
echo
${CRUCIBLE_HOME}/bin/repo config show

if [ ${RC} != 0 ]; then
    echo
    echo "WARNING: An error occured.  Please review the log for details."
fi
exit ${RC}
