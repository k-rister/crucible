#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

_crucible_completions() {
    if [ -z "$CRUCIBLE_HOME" ]; then
        if [ -e /etc/sysconfig/crucible ]; then
            . /etc/sysconfig/crucible
            if [ -z "$CRUCIBLE_HOME" ]; then
                return
            fi
        else
            return
        fi
    fi
    num_words=${#COMP_WORDS[@]} # Total number of words on the command
    let num_index=$num_words-1
    if [ $num_words -eq 2 ]; then
        COMPREPLY=($(compgen -W "help log repo update run wrapper console start stop get rm index postprocess opensearch extract ls tags archive unarchive reset instances" -- "${COMP_WORDS[1]}"))
    elif [ $num_words -eq 3 ]; then
        case "${COMP_WORDS[1]}" in
            help)
                COMPREPLY=($(compgen -W "log repo update run" -- "${COMP_WORDS[2]}"))
                ;;
            log)
                COMPREPLY=($(compgen -W "clear info init tidy view" -- "${COMP_WORDS[2]}"))
                ;;
            get)
                COMPREPLY=($(compgen -W "result metric" -- "${COMP_WORDS[2]}"))
                ;;
            repo)
                COMPREPLY=($(compgen -W "info details config" -- "${COMP_WORDS[2]}"))
                ;;
            update)
                COMPREPLY=($(compgen -W "all crucible $(cd $CRUCIBLE_HOME/subprojects/; find . -type l | sed 'sX./XX')" -- "${COMP_WORDS[2]}"))
                ;;
            run)
                COMPREPLY=($(compgen -f -- "${COMP_WORDS[2]}"))
                ;;
            start|stop)
                COMPREPLY=($(compgen -W "httpd opensearch valkey" -- "${COMP_WORDS[2]}"))
                ;;
            rm)
                COMPREPLY=($(compgen -W "--run" -- "${COMP_WORDS[2]}"))
                ;;
            opensearch)
                COMPREPLY=($(compgen -W "init" -- "${COMP_WORDS[2]}"))
                ;;
            extract)
                COMPREPLY=($(compgen -W "run-id primary-periods" -- "${COMP_WORDS[2]}"))
                ;;
            ls)
                COMPREPLY=($(compgen -W "--type --result-dir --filter-type --filters" -- "${COMP_WORDS[2]}"))
                ;;
            tags)
                COMPREPLY=($(compgen -W "--action" -- "${COMP_WORDS[2]}"))
                ;;
            postprocess)
                COMPREPLY=($(compgen -W "$(crucible result-completion --type run-dir)" -- "${COMP_WORDS[2]}"))
                ;;
            archive)
                COMPREPLY=($(compgen -W "$(crucible result-completion --type run-dir)" -- "${COMP_WORDS[2]}"))
                ;;
            unarchive)
                COMPREPLY=($(compgen -W "$(crucible result-completion --type archive)" -- "${COMP_WORDS[2]}"))
                ;;
            reset)
                COMPREPLY=($(compgen -W "hard" -- "${COMP_WORDS[2]}"))
                ;;
            instances)
                COMPREPLY=($(compgen -W "info add remove update query-opt index-instance instance-host-access-opt instance-cdmver-opt list-instance-names" -- "${COMP_WORDS[2]}"))
                ;;
        esac
    elif [ "$(expr $num_words % 2)" -eq 0 -a ${COMP_WORDS[1]} == "ls" ]; then
        case "${COMP_WORDS[2]}" in
            --type)
                COMPREPLY=($(compgen -W "tags run-id short" -- "${COMP_WORDS[3]}"))
                ;;
            --result-dir)
                COMPREPLY=($(compgen -W "$(crucible result-completion --type run-dir)" -- "${COMP_WORDS[3]}"))
                ;;
            --filter-type)
                COMPREPLY=($(compgen -W "name tags" -- "${COMP_WORDS[3]}"))
                ;;
        esac
    elif [ "$(expr $num_words % 2)" -eq 0 -a ${COMP_WORDS[1]} == "tags" ]; then
        case "${COMP_WORDS[2]}" in
            --action)
                COMPREPLY=($(compgen -W "add remove ls" -- "${COMP_WORDS[3]}"))
                ;;
        esac
    elif [ "$(expr $num_words % 2)" -eq 0 -a ${COMP_WORDS[1]} == "extract" ]; then
        case "${COMP_WORDS[2]}" in
            run-id|primary-periods)
                COMPREPLY=($(compgen -W "$(crucible result-completion --type run-dir)" -- "${COMP_WORDS[3]}"))
                ;;
        esac
    elif [ "$(expr $num_words % 2)" -eq 0 -a ${COMP_WORDS[1]} == "repo" ]; then
        case "${COMP_WORDS[2]}" in
            info|details)
                COMPREPLY=($(compgen -W "all crucible $(cd $CRUCIBLE_HOME/subprojects/; find . -type l | sed 'sX./XX')" -- "${COMP_WORDS[3]}"))
                ;;
            config)
                COMPREPLY=($(compgen -W "add help remove show update" -- "${COMP_WORDS[3]}"))
                ;;
        esac
    elif [ "$(expr $num_words % 2)" -eq 0 -a ${COMP_WORDS[1]} == "rm" ]; then
        case "${COMP_WORDS[2]}" in
            --run)
                COMPREPLY=($(compgen -W "$(crucible result-completion --type run-id)" -- "${COMP_WORDS[3]}"))
                ;;
        esac
    elif [ "$(expr $num_words % 2)" -eq 1 -a ${COMP_WORDS[1]} == "log" -a ${COMP_WORDS[2]} == "view" ]; then
        case "${COMP_WORDS[3]}" in
            sessionid)
                . ${CRUCIBLE_HOME}/bin/base
                session_ids=$(crucible_log getsessionids ${LOG_DB})
                COMPREPLY=($(compgen -W "${session_ids}" -- "${COMP_WORDS[4]}"))
                ;;
        esac
    elif [ "$(expr $num_words % 2)" -eq 0 -a ${COMP_WORDS[1]} == "log" ]; then
        case "${COMP_WORDS[2]}" in
            view)
                COMPREPLY=($(compgen -W "first last sessionid" -- "${COMP_WORDS[3]}"))
                ;;
        esac
    fi
}

complete -o nosort -F _crucible_completions crucible
