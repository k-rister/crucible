#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

# repo management infrastructure

source /etc/sysconfig/crucible

if [ ! -e "${CRUCIBLE_HOME}" ]; then
    echo "Could not find $CRUCIBLE_HOME, exiting."
    exit 1
fi

source "${CRUCIBLE_HOME}/bin/base"

function help() {
    echo "Usage:"
    echo "  repo <command> [command-specific-options]"
    echo ""
    echo "The following commands are supported"
    echo ""
    echo "info          |  Give high level info about the active repositories (default)"
    echo "details       |  Give details for the active repositories"
    echo "config        |  Repository configuration control and information"
    echo ""
}

if [ "$1" == "help" ]; then
    help
    exit
elif [ -z "$1" ]; then
    command="info"
else
    command=$1
    shift
fi

function repo_info() {
    local repo=$1
    local alt_dir=$2

    local type=$(echo "${repo}" | awk -F'/' '{ print $1 }')
    local name=$(echo "${repo}" | awk -F'/' '{ print $2 }')

    if [ -z "${alt_dir}" ]; then
        local dir=$(readlink -e ${repo})
        local error=${repo}
    else
        local dir=${alt_dir}
        local error=${dir}
    fi

    if [ -z "${dir}" ]; then
        echo "Error finding directory [${error}]"
        return
    fi

    if pushd ${dir} > /dev/null; then
        local git_status=$(git_get_status)
        local git_tracked_entries=$(git_get_tracked_entries "${git_status}")
        if [ "${git_tracked_entries}" == "0" ]; then
            local_changes="N"
        else
            local_changes="Y"
        fi
        local git_tracking=$(git_get_tracking "${git_status}")
        local git_local_branch=$(git_get_local_branch "${git_status}")
        if [ -n "${git_tracking}" ]; then
            local git_remote_name=$(git_get_remote_name "${git_tracking}")
            local git_remote_branch=$(git_get_remote_branch "${git_tracking}")
            local git_remote_url=$(git remote get-url ${git_remote_name})
            local git_delta_behind=$(git_get_delta_behind "${git_status}")
            if [ "${git_delta_behind}" == "0" ]; then
                local updates_available="-"
            else
                local updates_available="${git_delta_behind}"
            fi
        else
            # this likely means the branch is not tracking any
            # upstream repository branch (yet)
            local git_remote_name="N/A"
            local git_remote_branch="N/A"
            local git_remote_url="N/A"
            local updates_available="N/A"
        fi

        local current_commit=$(git rev-parse --short HEAD)

        popd > /dev/null
    else
        echo "ERROR: Failed to pushd to ${dir}"
    fi

    printf "${fmt_line}\n" "${name}" "${type}" "${git_local_branch}" "${git_remote_url}" "${git_remote_branch}" "${git_remote_name}" "${local_changes}" "${current_commit}" "${updates_available}"
}

function repo_details() {
    local repo=${1}
    local alt_dir=${2}

    local type=$(echo "${repo}" | awk -F'/' '{ print $1 }')
    local name=$(echo "${repo}" | awk -F'/' '{ print $2 }')

    if [ -z "${alt_dir}" ]; then
        local dir=$(readlink -e ${repo})
        local error=${repo}
    else
        local dir=${alt_dir}
        local error=${dir}
    fi

    if [ -z "${dir}" ]; then
        echo "Error finding directory [${error}]"
        return
    fi

    local section_title=-
    if [ -z "${type}" ]; then
        section_title=" ${name} "
    else
        section_title=" ${type}:${name} "
    fi
    local section_title_length=$(echo ${section_title} | wc -c)
    local width=80
    local header_width=$(( (${width} - ${section_title_length}) / 2 ))
    local header=$(printf "%0${header_width}d" 0 | sed -e 's/0/#/g')
    local footer=$(printf "%0${width}d" 0 | sed -e 's/0/*/g')

    if pushd ${dir} > /dev/null; then
        printf "%s%s%s\n" "${header}" "${section_title}" "${header}"

        git status --verbose --untracked-files=all --renames
        echo
        git log -n 1 HEAD
        echo
        git diff --patch --stat --no-color

        printf "%s\n" "${footer}"

        popd > /dev/null
    else
        echo "ERROR: Failed to pushd to ${type}:${name} [${dir}]"
    fi
}

function handle_scope() {
    local mode=${1}
    shift
    local scope=${1}
    shift

    if [ "${scope}" == "crucible" -o "${scope}" == "all" ]; then
        if pushd $CRUCIBLE_HOME > /dev/null; then
            case "${mode}" in
                info)
                    repo_info "/crucible" $CRUCIBLE_HOME
                    ;;
                details)
                    repo_details "/crucible" ${CRUCIBLE_HOME}
                    ;;
            esac

            popd > /dev/null
        fi

        if [ "${scope}" == "crucible" ]; then
            exit
        fi
    fi

    if [ "${scope}" == "all" ]; then
        if pushd $CRUCIBLE_HOME/subprojects > /dev/null; then
            for tmp_repo in $(find . -type l | sed 'sX./XX'); do
                case "${mode}" in
                    info)
                        repo_info ${tmp_repo}
                        ;;
                    details)
                        repo_details ${tmp_repo}
                        ;;
                esac
            done

            popd > /dev/null
        fi
    else
        if pushd $CRUCIBLE_HOME/subprojects > /dev/null; then
            case "${mode}" in
                info)
                    repo_info ${scope}
                    ;;
                details)
                    repo_details ${scope}
                    ;;
            esac

            popd > /dev/null
        else
            echo "ERROR: repo '${scope}' could not be found!"
            exit 1
        fi
    fi
}

function config_show() {
    fmt_line="%-20s  %-15s  %-13s  %-60s  %-20s  %-20s  %-20s"
    printf "${fmt_line}\n" "Project Family" "Project Name" "Project Type" "Git Remote URL" "Primary Branch" "Checkout Mode" "Checkout Target"

    for family in official unofficial; do
        projects=$(jq_query ${CRUCIBLE_HOME}/config/repos.json --arg family ${family} '.[$family][] | .name')
        for project in ${projects}; do
            project_type=$(jq_query ${CRUCIBLE_HOME}/config/repos.json --arg family ${family} --arg project_name ${project} '.[$family][] | select(.name == $project_name) | .type')
            project_repository=$(jq_query ${CRUCIBLE_HOME}/config/repos.json --arg family ${family} --arg project_name ${project} '.[$family][] | select(.name == $project_name) | .repository')
            project_primary_branch=$(jq_query ${CRUCIBLE_HOME}/config/repos.json --arg family ${family} --arg project_name ${project} '.[$family][] | select(.name == $project_name) | ."primary-branch"')
            project_checkout_mode=$(jq_query ${CRUCIBLE_HOME}/config/repos.json --arg family ${family} --arg project_name ${project} '.[$family][] | select(.name == $project_name) | .checkout.mode')
            project_checkout_target=$(jq_query ${CRUCIBLE_HOME}/config/repos.json --arg family ${family} --arg project_name ${project} '.[$family][] | select(.name == $project_name) | .checkout.target')

            printf "${fmt_line}\n" "${family}" "${project}" "${project_type}" "${project_repository}" "${project_primary_branch}" "${project_checkout_mode}" "${project_checkout_target}"
        done
    done
}

function subprojects_install() {
    echo "Calling subprojects-install to ensure proper subproject installation and configuration"
    ${CRUCIBLE_HOME}/bin/subprojects-install "$@"
}

function config_remove_repo() {
    local name=""
    local error=0

    local required="name"

    for key_value in $@; do
        key=$(echo "${key_value}" | awk -F= '{ print $1 }')
        value=$(echo "${key_value}" | awk -F= '{ print $2 }')
        #echo "key=${key} value=${value}"

        case "${key}" in
            "name")
                name="${value}"
                required=${required//name/}
                ;;
            *)
                echo "ERROR: Invalid key=value pair: ${key_value}"
                error=1
                ;;
        esac
    done

    local param
    for param in ${required}; do
        echo "ERROR: You must specify parameter ${param}"
        error=1
    done

    if [ ${error} -ne 0 ]; then
        exit 1
    fi

    jq_update_validated ${CRUCIBLE_HOME}/config/repos.json \
                        ${CRUCIBLE_HOME}/schema/repos.json \
                        "repos:remove-unofficial-repo" \
                        --arg repo_name "${name}" \
                        'del(.unofficial[] | select(.name == $repo_name))'

    echo "Successfully removed repo with name '${name}' from repo config file"
    echo
    subprojects_install --name ${name}
}

function config_add_repo() {
    local name=""
    local type=""
    local repository=""
    local primary_branch=""
    local checkout_mode=""
    local checkout_target=""
    local error=0

    local required="name type repository primary-branch checkout-mode checkout-target"

    for key_value in $@; do
        key=$(echo "${key_value}" | awk -F= '{ print $1 }')
        value=$(echo "${key_value}" | awk -F= '{ print $2 }')
        #echo "key=${key} value=${value}"

        case "${key}" in
            "name")
                name="${value}"
                required=${required//name/}
                ;;
            "type")
                type="${value}"
                required=${required//type/}
                ;;
            "repository")
                repository="${value}"
                required=${required//repository/}
                ;;
            "primary-branch")
                primary_branch="${value}"
                required=${required//primary-branch/}
                ;;
            "checkout-mode")
                checkout_mode="${value}"
                required=${required//checkout-mode/}
                ;;
            "checkout-target")
                checkout_target="${value}"
                required=${required//checkout-target/}
                ;;
            *)
                echo "ERROR: Invalid key=value pair: ${key_value}"
                error=1
                ;;
        esac
    done

    local param
    for param in ${required}; do
        echo "ERROR: You must specify parameter ${param}"
        error=1
    done

    if [ ${error} -ne 0 ]; then
        exit 1
    fi

    jq_update_validated ${CRUCIBLE_HOME}/config/repos.json \
                        ${CRUCIBLE_HOME}/schema/repos.json \
                        "repos:add-unofficial-repo" \
                        --arg repo_name "${name}" \
                        --arg repo_type "${type}" \
                        --arg repo_repository "${repository}" \
                        --arg repo_primary_branch "${primary_branch}" \
                        --arg repo_checkout_mode "${checkout_mode}" \
                        --arg repo_checkout_target "${checkout_target}" \
                        '.unofficial += [
                                          {
                                            "name": $repo_name,
                                            "type": $repo_type,
                                            "repository": $repo_repository,
                                            "primary-branch": $repo_primary_branch,
                                            "checkout": {
                                              "mode": $repo_checkout_mode,
                                              "target": $repo_checkout_target
                                            }
                                          }
                                        ]'

    echo "Successfully added repo with name '${name}' to repo config file"
    echo
    if pushd ${CRUCIBLE_HOME} > /dev/null; then
        git diff config/repos.json
        popd > /dev/null
    fi
    echo
    subprojects_install --name ${name}
}

function config_update_repo() {
    local name=""
    local type=""
    local repository=""
    local primary_branch=""
    local checkout_mode=""
    local checkout_target=""
    local error=0

    local required="name"
    local optional=""

    for key_value in $@; do
        key=$(echo "${key_value}" | awk -F= '{ print $1 }')
        value=$(echo "${key_value}" | awk -F= '{ print $2 }')
        #echo "key=${key} value=${value}"

        case "${key}" in
            "name")
                name="${value}"
                required=${required//name}
                ;;
            "repository")
                repository="${value}"
                optional+="repository "
                ;;
            "primary-branch")
                primary_branch="${value}"
                optional+="primary-branch "
                ;;
            "checkout-mode")
                checkout_mode="${value}"
                optional+="checkout-mode "
                ;;
            "checkout-target")
                checkout_target="${value}"
                optional+="checkout-target "
                ;;
            *)
                echo "ERROR: Invalid key=value pair: ${key_value}"
                error=1
                ;;
        esac
    done

    local param
    for param in ${required}; do
        echo "ERROR: You must specify parameter ${param}"
        error=1
    done

    if [ -z "${optional}" ]; then
        echo "ERROR: You must specify a parameter to update."
        echo "       Available parameters are:"
        echo "           repository"
        echo "           primary-branch"
        echo "           checkout-mode"
        echo "           checkout-target"
        error=1
    fi

    if [ ${error} -ne 0 ]; then
        exit 1
    fi

    local run_subprojects_installer=0
    local do_target_checkout=0

    if echo "${optional}" | grep -q "primary-branch"; then
        if echo "${optional}" | grep -q "repository"; then
            jq_update_validated ${CRUCIBLE_HOME}/config/repos.json \
                                ${CRUCIBLE_HOME}/schema/repos.json \
                                "repos:update-repo-primary-branch" \
                                --arg repo_name "${name}" \
                                --arg repo_primary_branch "${primary_branch}" \
                                '(.official[], .unofficial[] | select(.name == $repo_name) | ."primary-branch") |= $repo_primary_branch'
        else
            echo "ERROR: It does not make sense (from a Crucible perspective) to change the primary branch without changing the repository"
            exit 1
        fi
    fi

    if echo "${optional}" | grep -q "repository"; then
        jq_update_validated ${CRUCIBLE_HOME}/config/repos.json \
                            ${CRUCIBLE_HOME}/schema/repos.json \
                            "repos:update-repo-repository" \
                            --arg repo_name "${name}" \
                            --arg repo_repository "${repository}" \
                            '(.official[], .unofficial[] | select(.name == $repo_name) | .repository) |= $repo_repository'

        run_subprojects_installer=1
    fi

    if echo "${optional}" | grep -q "checkout-mode"; then
        jq_update_validated ${CRUCIBLE_HOME}/config/repos.json \
                            ${CRUCIBLE_HOME}/schema/repos.json \
                            "repos:update-repo-checkout-mode" \
                            --arg repo_name "${name}" \
                            --arg repo_checkout_mode "${checkout_mode}" \
                            '(.official[], .unofficial[] | select(.name == $repo_name) | .checkout.mode) |= $repo_checkout_mode'
    fi

    if echo "${optional}" | grep -q "checkout-target"; then
        jq_update_validated ${CRUCIBLE_HOME}/config/repos.json \
                            ${CRUCIBLE_HOME}/schema/repos.json \
                            "repos:update-repo-checkout-target" \
                            --arg repo_name "${name}" \
                            --arg repo_checkout_target "${checkout_target}" \
                            '(.official[], .unofficial[] | select(.name == $repo_name) | .checkout.target) |= $repo_checkout_target'

        do_target_checkout=1
    fi

    if [ ${run_subprojects_installer} -eq 1 ]; then
        subprojects_install --name ${name}
    elif [ ${do_target_checkout} -eq 1 ]; then
        subproject_type=$(jq_query ${CRUCIBLE_HOME}/config/repos.json --arg repo_name "${name}" '.official[], .unofficial[] | select(.name == $repo_name) | .type')
        subproject_type_dir=$(get_project_type_dir "${subproject_type}")
        if pushd ${CRUCIBLE_HOME}/subprojects/${subproject_type_dir}/${name} > /dev/null; then
            if ! git checkout ${checkout_target}; then
                echo "ERROR: Failed to checkout target '${checkout_target}' for subproject '${name}'"
                exit 1
            fi

            popd > /dev/null
        else
            echo "ERROR: Could not locate subproject directory for repository '${name}'"
            exit 1
        fi
    fi
}

function config_help() {
    echo "Config Usage:"
    echo "  repo config [<command> <command-specific-options>]"
    echo
    echo "The following command are supported"
    echo
    echo "add           |  Add an unofficial repository"
    echo "remove        |  Remove an unofficial repository"
    echo "show          |  Dump the configuration information in tabular form (default)"
    echo "update        |  Update one of the repositories"
    echo
}

case "${command}" in
    info|details)
        if [ -z "${1}" ]; then
            scope="all"
        else
            scope=${1}
            shift
        fi

        case "${command}" in
            info)
                fmt_line="%-15s  %-13s  %-16s  %-60s  %-17s  %-15s  %-13s  %-14s  %-13s"
                printf "${fmt_line}\n" "Project Name" "Project Type" "Git Local Branch" "Git Remote URL" "Git Remote Branch" "Git Remote Name" "Local Changes" "Current Commit" "Updates"

                handle_scope info ${scope}
                ;;
            details)
                handle_scope details ${scope}
                ;;
        esac
        ;;
    config)
        source "${CRUCIBLE_HOME}/bin/jqlib"

        config_subcommand="show"
        if [ -n "${1}" ]; then
            config_subcommand=${1}
            shift
        fi

        case "${config_subcommand}" in
            add)
                config_add_repo "$@"
                ;;
            remove)
                config_remove_repo "$@"
                ;;
            show)
                config_show
                ;;
            update)
                config_update_repo "$@"
                ;;
            help)
                config_help
                ;;
            *)
                config_help
                exit 1
                ;;
        esac
        ;;
esac
